document.addEventListener("DOMContentLoaded", () => {
  const cells = document.querySelectorAll(".cell");
  const message = document.getElementById("message");
  const restartButton = document.getElementById("restartButton");

  let currentPlayer = "X";
  let board = ["", "", "", "", "", "", "", "", ""];
  let gameEnded = false;

  // ... (remaining JavaScript code from previous response)

  // Create the Three.js scene, camera, and renderer
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById("background").appendChild(renderer.domElement);

  // Create the radio wave shader material
  const waveShader = new THREE.ShaderMaterial({
    uniforms: {
      uTime: { value: 0.0 }
    },
    vertexShader: `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      varying vec2 vUv;
      uniform float uTime;
      void main() {
        vec2 p = -1.0 + 2.0 * vUv;
        float a = atan(p.y, p.x);
        float d = length(p);
        vec3 col = vec3(0.0);
        col += 0.5 + 0.5 * cos(uTime + d + a);
        col += 0.2 + 0.2 * cos(uTime + d * 3.0 + a);
        col += 0.05 + 0.05 * cos(uTime + d * 5.0 + a);
        gl_FragColor = vec4(col, 1.0);
      }
    `
  });

  // Create a plane for the radio wave background
  const geometry = new THREE.PlaneGeometry(2, 2);
  const waveBackground = new THREE.Mesh(geometry, waveShader);
  scene.add(waveBackground);

  // Set the camera position
  camera.position.z = 5;

  // Animation loop
  function animate() {
    requestAnimationFrame(animate);

    // Update the uniform value for the shader
    waveShader.uniforms.uTime.value += 0.02;

    renderer.render(scene, camera);
  }

  animate();
});
